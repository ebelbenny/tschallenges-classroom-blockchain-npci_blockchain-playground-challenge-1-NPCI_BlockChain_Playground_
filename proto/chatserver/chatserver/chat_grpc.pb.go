// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatServerClient is the client API for ChatServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServerClient interface {
	Message(ctx context.Context, opts ...grpc.CallOption) (ChatServer_MessageClient, error)
}

type chatServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServerClient(cc grpc.ClientConnInterface) ChatServerClient {
	return &chatServerClient{cc}
}

func (c *chatServerClient) Message(ctx context.Context, opts ...grpc.CallOption) (ChatServer_MessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatServer_serviceDesc.Streams[0], "/chat.ChatServer/Message", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServerMessageClient{stream}
	return x, nil
}

type ChatServer_MessageClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServerMessageClient struct {
	grpc.ClientStream
}

func (x *chatServerMessageClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServerMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServerServer is the server API for ChatServer service.
// All implementations must embed UnimplementedChatServerServer
// for forward compatibility
type ChatServerServer interface {
	Message(ChatServer_MessageServer) error
	mustEmbedUnimplementedChatServerServer()
}

// UnimplementedChatServerServer must be embedded to have forward compatible implementations.
type UnimplementedChatServerServer struct {
}

func (UnimplementedChatServerServer) Message(ChatServer_MessageServer) error {
	return status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedChatServerServer) mustEmbedUnimplementedChatServerServer() {}

// UnsafeChatServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServerServer will
// result in compilation errors.
type UnsafeChatServerServer interface {
	mustEmbedUnimplementedChatServerServer()
}

func RegisterChatServerServer(s grpc.ServiceRegistrar, srv ChatServerServer) {
	s.RegisterService(&_ChatServer_serviceDesc, srv)
}

func _ChatServer_Message_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServerServer).Message(&chatServerMessageServer{stream})
}

type ChatServer_MessageServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatServerMessageServer struct {
	grpc.ServerStream
}

func (x *chatServerMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServerMessageServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatServer",
	HandlerType: (*ChatServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Message",
			Handler:       _ChatServer_Message_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

